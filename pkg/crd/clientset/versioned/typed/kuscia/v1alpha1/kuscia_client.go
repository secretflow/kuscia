// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"net/http"

	v1alpha1 "github.com/secretflow/kuscia/pkg/crd/apis/kuscia/v1alpha1"
	"github.com/secretflow/kuscia/pkg/crd/clientset/versioned/scheme"
	rest "k8s.io/client-go/rest"
)

type KusciaV1alpha1Interface interface {
	RESTClient() rest.Interface
	AppImagesGetter
	ClusterDomainRoutesGetter
	DomainsGetter
	DomainAppImagesGetter
	DomainDatasGetter
	DomainDataGrantsGetter
	DomainDataSourcesGetter
	DomainRoutesGetter
	GatewaysGetter
	InteropConfigsGetter
	KusciaDeploymentsGetter
	KusciaDeploymentSummariesGetter
	KusciaJobsGetter
	KusciaJobSummariesGetter
	KusciaTasksGetter
	KusciaTaskSummariesGetter
	TaskResourcesGetter
	TaskResourceGroupsGetter
}

// KusciaV1alpha1Client is used to interact with features provided by the kuscia.secretflow group.
type KusciaV1alpha1Client struct {
	restClient rest.Interface
}

func (c *KusciaV1alpha1Client) AppImages() AppImageInterface {
	return newAppImages(c)
}

func (c *KusciaV1alpha1Client) ClusterDomainRoutes() ClusterDomainRouteInterface {
	return newClusterDomainRoutes(c)
}

func (c *KusciaV1alpha1Client) Domains() DomainInterface {
	return newDomains(c)
}

func (c *KusciaV1alpha1Client) DomainAppImages(namespace string) DomainAppImageInterface {
	return newDomainAppImages(c, namespace)
}

func (c *KusciaV1alpha1Client) DomainDatas(namespace string) DomainDataInterface {
	return newDomainDatas(c, namespace)
}

func (c *KusciaV1alpha1Client) DomainDataGrants(namespace string) DomainDataGrantInterface {
	return newDomainDataGrants(c, namespace)
}

func (c *KusciaV1alpha1Client) DomainDataSources(namespace string) DomainDataSourceInterface {
	return newDomainDataSources(c, namespace)
}

func (c *KusciaV1alpha1Client) DomainRoutes(namespace string) DomainRouteInterface {
	return newDomainRoutes(c, namespace)
}

func (c *KusciaV1alpha1Client) Gateways(namespace string) GatewayInterface {
	return newGateways(c, namespace)
}

func (c *KusciaV1alpha1Client) InteropConfigs() InteropConfigInterface {
	return newInteropConfigs(c)
}

func (c *KusciaV1alpha1Client) KusciaDeployments(namespace string) KusciaDeploymentInterface {
	return newKusciaDeployments(c, namespace)
}

func (c *KusciaV1alpha1Client) KusciaDeploymentSummaries(namespace string) KusciaDeploymentSummaryInterface {
	return newKusciaDeploymentSummaries(c, namespace)
}

func (c *KusciaV1alpha1Client) KusciaJobs(namespace string) KusciaJobInterface {
	return newKusciaJobs(c, namespace)
}

func (c *KusciaV1alpha1Client) KusciaJobSummaries(namespace string) KusciaJobSummaryInterface {
	return newKusciaJobSummaries(c, namespace)
}

func (c *KusciaV1alpha1Client) KusciaTasks(namespace string) KusciaTaskInterface {
	return newKusciaTasks(c, namespace)
}

func (c *KusciaV1alpha1Client) KusciaTaskSummaries(namespace string) KusciaTaskSummaryInterface {
	return newKusciaTaskSummaries(c, namespace)
}

func (c *KusciaV1alpha1Client) TaskResources(namespace string) TaskResourceInterface {
	return newTaskResources(c, namespace)
}

func (c *KusciaV1alpha1Client) TaskResourceGroups() TaskResourceGroupInterface {
	return newTaskResourceGroups(c)
}

// NewForConfig creates a new KusciaV1alpha1Client for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*KusciaV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	httpClient, err := rest.HTTPClientFor(&config)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(&config, httpClient)
}

// NewForConfigAndClient creates a new KusciaV1alpha1Client for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h *http.Client) (*KusciaV1alpha1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientForConfigAndClient(&config, h)
	if err != nil {
		return nil, err
	}
	return &KusciaV1alpha1Client{client}, nil
}

// NewForConfigOrDie creates a new KusciaV1alpha1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *KusciaV1alpha1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new KusciaV1alpha1Client for the given RESTClient.
func New(c rest.Interface) *KusciaV1alpha1Client {
	return &KusciaV1alpha1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1alpha1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *KusciaV1alpha1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
