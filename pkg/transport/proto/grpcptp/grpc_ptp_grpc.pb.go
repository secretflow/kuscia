// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: grpc_ptp.proto

package grpcPtp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransportClient is the client API for Transport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportClient interface {
	Pop(ctx context.Context, in *TransportInbound, opts ...grpc.CallOption) (*TransportOutbound, error)
	Peek(ctx context.Context, in *TransportInbound, opts ...grpc.CallOption) (*TransportOutbound, error)
	Release(ctx context.Context, in *TransportInbound, opts ...grpc.CallOption) (*TransportOutbound, error)
	Invoke(ctx context.Context, in *InvokeTransportInbound, opts ...grpc.CallOption) (*TransportOutbound, error)
}

type transportClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportClient(cc grpc.ClientConnInterface) TransportClient {
	return &transportClient{cc}
}

func (c *transportClient) Pop(ctx context.Context, in *TransportInbound, opts ...grpc.CallOption) (*TransportOutbound, error) {
	out := new(TransportOutbound)
	err := c.cc.Invoke(ctx, "/org.ppc.grpc_ptp.Transport/Pop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) Peek(ctx context.Context, in *TransportInbound, opts ...grpc.CallOption) (*TransportOutbound, error) {
	out := new(TransportOutbound)
	err := c.cc.Invoke(ctx, "/org.ppc.grpc_ptp.Transport/Peek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) Release(ctx context.Context, in *TransportInbound, opts ...grpc.CallOption) (*TransportOutbound, error) {
	out := new(TransportOutbound)
	err := c.cc.Invoke(ctx, "/org.ppc.grpc_ptp.Transport/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) Invoke(ctx context.Context, in *InvokeTransportInbound, opts ...grpc.CallOption) (*TransportOutbound, error) {
	out := new(TransportOutbound)
	err := c.cc.Invoke(ctx, "/org.ppc.grpc_ptp.Transport/Invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportServer is the server API for Transport service.
// All implementations must embed UnimplementedTransportServer
// for forward compatibility
type TransportServer interface {
	Pop(context.Context, *TransportInbound) (*TransportOutbound, error)
	Peek(context.Context, *TransportInbound) (*TransportOutbound, error)
	Release(context.Context, *TransportInbound) (*TransportOutbound, error)
	Invoke(context.Context, *InvokeTransportInbound) (*TransportOutbound, error)
	mustEmbedUnimplementedTransportServer()
}

// UnimplementedTransportServer must be embedded to have forward compatible implementations.
type UnimplementedTransportServer struct {
}

func (UnimplementedTransportServer) Pop(context.Context, *TransportInbound) (*TransportOutbound, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pop not implemented")
}
func (UnimplementedTransportServer) Peek(context.Context, *TransportInbound) (*TransportOutbound, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peek not implemented")
}
func (UnimplementedTransportServer) Release(context.Context, *TransportInbound) (*TransportOutbound, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedTransportServer) Invoke(context.Context, *InvokeTransportInbound) (*TransportOutbound, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (UnimplementedTransportServer) mustEmbedUnimplementedTransportServer() {}

// UnsafeTransportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportServer will
// result in compilation errors.
type UnsafeTransportServer interface {
	mustEmbedUnimplementedTransportServer()
}

func RegisterTransportServer(s grpc.ServiceRegistrar, srv TransportServer) {
	s.RegisterService(&Transport_ServiceDesc, srv)
}

func _Transport_Pop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).Pop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.ppc.grpc_ptp.Transport/Pop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).Pop(ctx, req.(*TransportInbound))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_Peek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).Peek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.ppc.grpc_ptp.Transport/Peek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).Peek(ctx, req.(*TransportInbound))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.ppc.grpc_ptp.Transport/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).Release(ctx, req.(*TransportInbound))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeTransportInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.ppc.grpc_ptp.Transport/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).Invoke(ctx, req.(*InvokeTransportInbound))
	}
	return interceptor(ctx, in, info, handler)
}

// Transport_ServiceDesc is the grpc.ServiceDesc for Transport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.ppc.grpc_ptp.Transport",
	HandlerType: (*TransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pop",
			Handler:    _Transport_Pop_Handler,
		},
		{
			MethodName: "Peek",
			Handler:    _Transport_Peek_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _Transport_Release_Handler,
		},
		{
			MethodName: "Invoke",
			Handler:    _Transport_Invoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_ptp.proto",
}
