# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

setup: true

orbs:
  continuation: circleci/continuation@0.3.1

parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""
  DEPS_Tag:
    type: string
    default: ""

executors:
  linux_x64_executor: # declares a reusable executor
    docker:
      - image: secretflow/kuscia-ci:0.4
    resource_class: 2xlarge
    shell: /bin/bash --login -eo pipefail
  linux_aarch64_executor:
    docker:
      - image: secretflow/ubuntu-base-ci:latest
    resource_class: arm.2xlarge
    shell: /bin/bash --login -eo pipefail

commands:
  go_env:
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "install go"
          command: |
            ARCH=$(uname -m)

            if [ "$ARCH" == "aarch64" ]; then
            ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo Asia/Shanghai > /etc/timezone
            ln -sf /usr/bin/bash /bin/sh
            yum update -y
            yum install -y  wget make cmake git curl unzip gcc perl-IPC-Cmd
            GOLANG_DIR="/usr/local"
            GOLANG_VERSION="1.19.7"
            GOLANG_URL="https://golang.google.cn/dl/go${GOLANG_VERSION}.linux-arm64.tar.gz"

            if ! command -v go &> /dev/null; then
            wget "$GOLANG_URL"
            tar -C "$GOLANG_DIR" -xzf "go${GOLANG_VERSION}.linux-arm64.tar.gz"
            export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
            echo 'export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin' | tee -a ~/.bashrc
            echo 'export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin' >> $BASH_ENV
            fi
            fi
  test:
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Install the go module"
          command: |
            go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28.1
            go install github.com/t-yuki/gocover-cobertura@latest
            go install github.com/jstemmer/go-junit-report/v2@latest
            go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.50.1
      - run:
          name: Test Kuscia
          command: make test
  build_kuscia:
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: "make build"
          command: |
            git config --global --add safe.directory ./
            make build
      - store_artifacts:
          path: build
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  unit-test:
    parameters:
      executor:
        type: string
    executor: <<parameters.executor>>
    steps:
      - checkout
      - go_env
      - test
  linux_build_kuscia:
    parameters:
      executor:
        type: string
    executor: <<parameters.executor>>
    steps:
      - checkout
      - go_env
      - build_kuscia
  image_publish:
    docker:
      - image: secretflow/kuscia-ci:0.4
    shell: /bin/bash --login -eo pipefail
    steps:
      - attach_workspace:
          at: build
      - checkout
      - setup_remote_docker
      - run:
          name: Build image and publish
          command: |
            CIRCLETAG=$(echo ${CIRCLE_TAG} | sed 's/v//')
            IMAGE = "secretflow/kuscia"
            ALIYUN_IMAGE = "secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/kuscia"

            # login kuscia dockerhub registry
            docker login -u secretflow -p ${DOCKER_DEPLOY_TOKEN}

            docker buildx create --name kuscia --platform linux/arm64,linux/amd64 --use

            docker buildx build -t ${IMAGE}:${CIRCLETAG} --platform linux/arm64,linux/amd64 -f ./build/dockerfile/kuscia-anolis.Dockerfile . --push
            docker buildx build -t ${IMAGE}:latest --platform linux/arm64,linux/amd64 -f ./build/dockerfile/kuscia-anolis.Dockerfile . --push

            # login kuscia aliyun registry
            docker login -u ${ALIYUN_DOCKER_USERNAME} -p ${ALIYUN_DOCKER_PASSWORD}  secretflow-registry.cn-hangzhou.cr.aliyuncs.com

            docker buildx build -t ${ALIYUN_IMAGE}:latest --platform linux/arm64,linux/amd64 -f ./build/dockerfile/kuscia-anolis.Dockerfile . --push
            docker buildx build -t ${ALIYUN_IMAGE}:${CIRCLETAG} --platform linux/arm64,linux/amd64 -f ./build/dockerfile/kuscia-anolis.Dockerfile . --push


# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build-workflow:
    when:
      and:
        - not: << pipeline.parameters.GHA_Action >>
        - not: << pipeline.parameters.GHA_Meta >>
    jobs:
      - unit-test:
          matrix:
            parameters:
              executor: [ "linux_x64_executor", "linux_aarch64_executor" ]
      - linux_build_kuscia:
          matrix:
            parameters:
              executor: [ "linux_x64_executor", "linux_aarch64_executor" ]
          filters:
            branches:
              only:
                - main
                - release/*
      - image_publish:
          filters:
            tags:
              only: /.*/
          requires:
            - linux_build_kuscia
  build-kuscia-deps-workflow:
    when:
      equal: [ "publish_kuscia_deps", << pipeline.parameters.GHA_Meta >> ]
    jobs:
      - continuation/continue:
          configuration_path: .circleci/deps-config.yml
  publish-workflow:
    when:
      equal: [ "publish_pypi", << pipeline.parameters.GHA_Meta >> ]
    jobs:
      - continuation/continue:
          configuration_path: .circleci/release-config.yml