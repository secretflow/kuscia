# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023 Ant Group Co., Ltd.
# This file is distributed under the same license as the Kuscia package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kuscia \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-10 20:35+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../troubleshoot/network/network_authorization_check.md:1
msgid "授权错误排查"
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:3
msgid "排查步骤"
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:5
msgid "检查授权状态以及参数是否符合预期"
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:7
msgid ""
"登录到容器（中心化模式在 master 容器、点对点模式在 Autonomy 容器）并执行 `kubectl get cdr` "
"命令查看授权信息，READY 为 True 时表明通信正常，为空时表明通信异常，可以先看下 HOST 和端口是否正确或者执行 `kubectl "
"get cdr ${cdr_name} -oyaml` 命令看下详细信息，参数确认无误仍无法正常通信请参考下文。"
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:9
msgid "授权正常示例如下："
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:18
msgid "查看 curl 返回结果"
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:20
msgid ""
"大部分的网络问题都是网络协议（http/https/mtls、IP、端口（包括端口映射）不正确导致的，最简单的方法就是通过在`源节点`手动访问（curl）`目标节点的地址`来判定。比如：curl"
" -kvvv <https://1.1.1.1:18080>（此处为示例 ip 与端口），通过 curl "
"命令能够快速分析网络授权异常原因，curl 返回的结果一般分为以下几种情况："
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:22
msgid "返回正常结果为 401，示例如下："
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:66
msgid "一直处于请求连接状态，示例如下："
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:73
msgid "这种情况通常是因为对端机构侧服务器没有给本端服务器出口 ip 加白，可以先 curl cip.cc 查询本端服务器出口 ip 给到对方加白。"
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:75
msgid "请求返回报错 Connection refused，示例如下："
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:82
msgid ""
"这种情况通常表示对端机构侧服务器已经给本端服务器加白了，但是对端服务器服务没有拉起或者端口没有打开，可以在对端服务器上 `docker ps` "
"`netstat -anutp | grep \"${port}\"` 看下机器映射的端口是否正常打开。"
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:84
msgid ""
"其他各种非正常 401 "
"返回的情形需要配合对方机构侧检查网络链路，例如：防火墙阻拦、网关代理配置有问题等。如果中间有机构网关，可以参考[网络要求](../../deployment/networkrequirements.md)的文档来确保网关符合要求。"
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:86
msgid "查看网关日志"
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:88
msgid ""
"通过日志能够很好的分析 Kuscia "
"运行状态、连接情况、流量信息等，详细内容请参考[日志说明](../../deployment/logdescription.md/#envoy)"
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:90
msgid "分析网络拓扑、使用抓包工具"
msgstr ""

#: ../../troubleshoot/network/network_authorization_check.md:92
msgid ""
"在复杂的网络环境中，可以先整理两方机构之间的网络拓扑，以便于更加清晰、快速的定位，再配合 Tcpdump、Wireshark "
"等抓包工具进行排查。一个机构的网络拓扑可以参考[网络要求](../../deployment/networkrequirements.md)"
msgstr ""

