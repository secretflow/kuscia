# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023 Ant Group Co., Ltd.
# This file is distributed under the same license as the Kuscia package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kuscia \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-10 20:35+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.14.0\n"

#: ../../reference/concepts/domaindatagrant_cn.md:1
msgid "DomainDataGrant"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:3
msgid ""
"在 Kuscia 中，DomainDataGrant 表示被 Kuscia 所管理的数据对象授权，包括 授权方节点 ID、被授权节点 ID、授权的"
" DomainData 、授权使用限制和授权信息签名等。DomainDataGrant 属于节点内资源，每一个 DomainDataGrant "
"都有自己所属的 Domain，且仅能被自己所属的 Domain 访问。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:5
msgid ""
"DomainData Controller 会在 DomainDataGrant 被创建之后，把 DomainDataGrant "
"从授权方节点下复制到被授权节点下，同时也会把授权的 DomainData 也复制过去。同理，如果授权方删除了本条授权，Controller "
"也会从被授权方下删除本条授权的拷贝。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:7
msgid ""
"被授权方可以通过授权方的证书来校验 DomainDataGrant 里的签名来验证授权信息是否合法。由于将 DomainDataGrant "
"的信息进行签名的操作比较繁琐，建议调用 datamesh 的相关接口进行操作。签名字段可用为空。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:9
msgid "用例"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:11
msgid "以下是一些 DomainDataGrant 的典型用例："
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:13
msgid "创建 DomainDataGrant，你将体验如何使用通过创建一个 DomainDataGrant 将你自己的数据加入 Kuscia 的管理。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:14
msgid "更新 DomainDataGrant，你将熟悉如何更新现有的 DomainDataGrant，从而变更 DomainDataGrant 的信息。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:15
msgid ""
"清理 DomainDataGrant，你将熟悉如何清理不需要的 DomainDataGrant。删除 DomainDataGrant "
"并不会删除真实的数据，只是 Kuscia 不再管理这些授权信息。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:16
msgid ""
"在 Domain 侧管理 DomainDataGrant，你将熟悉如何通过 Data Mesh API 来在 Domain 侧管理 "
"DomainDataGrant。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:17
msgid "参考 DomainDataGrant 对象定义，你将获取详细的 DomainDataGrant 描述信息。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:19
msgid "创建 DomainData"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:21
msgid "下面以 `alice-bob.yaml` 的内容为例，介绍创建 DomainDataGrant。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:39
msgid "在该示例中:"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:41
msgid ""
"`.metadata.labels`：标签在 K3s "
"中用于支持高效的查询和监听操作，参考：[标签和选择算符](https://kubernetes.io/zh-"
"cn/docs/concepts/overview/working-with-objects/labels/)。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:42
msgid "`.metadata.name`：表示隐私计算节点 DomainDataGrant 的名称，当前示例为`alice-bob`。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:43
msgid "`.metadata.namespace`: 表示 DomainDataGrant 所属的命名空间，即所属的节点，当前示例为`alice`。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:44
msgid "`.spec.author`：表示授权方节点 ID 。当前示例授权方节点为`alice`。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:45
msgid "`.spec.domainDataID`：表示 DomainDataGrant 所属的 DomainData。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:46
msgid "`.spec.grantDomain`：表示被授权的节点 ID 。当前示例授权方节点为`bob`。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:48
msgid ""
"参照 [DomainData](./domaindata_cn.md) 中的方法，先创建 `alice-table` 这个 DomainData "
"资源。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:50
msgid "在 master 容器即 `${USER}-kuscia-master` 容器中，运行以下命令创建 DomainDataGrant。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:56
msgid "在 master 容器即 `${USER}-kuscia-master` 容器中，检查 DomainDataGrant 是否创建成功。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:62
msgid "在 master 容器即 `${USER}-kuscia-master` 容器中，检查 bob 是否被成功授权。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:69
msgid "更新 DomainDataGrant"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:71
msgid "下面以 `alice-bob.yaml` 的内容为例，介绍更新 DomainDataGrant。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:89
msgid "在该示例中，将`.spec.description.name`的值调整为`test2`。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:91
msgid "运行以下命令更新 DomainDataGrant。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:97
msgid "检查 DomainDataGrant 是否更新成功。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:103
msgid "检查 bob 下的 DomainDataGrant 是否更新成功。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:109
msgid "清理 DomainData"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:111
msgid ""
"下面以 DomainDataGrant `alice-bob.yaml` 为例，介绍清理 DomainDataGrant。 注意：清理 "
"DomainDataGrant 并不会清除真实的数据内容，只是从 Kuscia 中删除 DomainDataGrant 的相关资源。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:114
msgid "运行以下命令清理 DomainDataGrant。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:120
msgid "检查 Alice 下的 DomainDataGrant 是否已被清理。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:127
msgid "检查 Alice 下的 DomainData 是否还存在。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:133
msgid ", 检查 Bob 下的 DomainDataGrant 是否已被清理。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:140
msgid "检查 Bob 下的 DomainDataG 是否已被清理。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:149
msgid "在 Domain 侧管理 DomainDataGrant"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:151
msgid ""
"如 上文所述，DomainDataGrant 属于节点内资源，每一个 DomainDataGrant 都有自己所属的 "
"Domain，且仅能被自己所属的 Domain 访问。 你可以在 Domain 侧管理属于该 Domain 的 "
"DomainDataGrant。Kuscia 在 Domain 侧提供了的 Kuscia API 来管理 DomainDataGrant。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:154
msgid ""
"Kuscia API 提供 HTTP 和 GRPC 两种访问方法，端口分为 8082 和 8083 。 端口，详情请参考 [Kuscia "
"API](../apis/domaindatagrant_cn.md)。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:157
msgid "进入 alice 容器 `${USER}-kuscia-lite-alice` 容器中，查询 DomainDataGrant。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:170
msgid "参考"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:172
msgid "下面以 `alice-bob` 模版为例，介绍 DomainData 所包含的完整字段。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:191
msgid "DomainDataGrant `metadata` 的子字段详细介绍如下："
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:193
msgid ""
"`labels`：标签在 K3s 中用于支持高效的查询和监听操作，参考：[标签和选择算符](https://kubernetes.io/zh-"
"cn/docs/concepts/overview/working-with-objects/labels/)。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:194
msgid "`name`：表示隐私计算节点 DomainDataGrant 的名称，当前示例为`alice-bob`。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:195
msgid "`namespace`：表示 DomainDataGrant 所属的命名空间，即所属的节点，当前示例为`alice`。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:197
msgid "DomainDataGrant `spec` 的子字段详细介绍如下："
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:199
msgid "`author`：表示授权方节点 ID，用来标识这条授权是由哪个节点发起的。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:200
msgid ""
"`domainDataID`：表示这条授权是基于哪个 DomainData 生成的，DomainData Controller 不仅会将 "
"DomainDataGrannt 拷贝给被授权节点，还会将 DomainData 也拷贝过去，因此需要保证 DomainData 是已经存在的。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:201
msgid "`grantDomain`：表示被授权方节点 ID，请保证该 Domain 已经存在。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:202
msgid ""
"`signature`：表示授权信息的签名，是用 author 的节点私钥进行签名的。grantDomain 可以用 author "
"的公钥进行验证授权信息的真假。该字段为预留字段，暂未开启，填入空字符串即可。"
msgstr ""

#: ../../reference/concepts/domaindatagrant_cn.md:203
msgid "`description`：表示用户自定义的描述信息。"
msgstr ""

