// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package datamesh

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DomainDataGrantServiceClient is the client API for DomainDataGrantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainDataGrantServiceClient interface {
	CreateDomainDataGrant(ctx context.Context, in *CreateDomainDataGrantRequest, opts ...grpc.CallOption) (*CreateDomainDataGrantResponse, error)
	QueryDomainDataGrant(ctx context.Context, in *QueryDomainDataGrantRequest, opts ...grpc.CallOption) (*QueryDomainDataGrantResponse, error)
	UpdateDomainDataGrant(ctx context.Context, in *UpdateDomainDataGrantRequest, opts ...grpc.CallOption) (*UpdateDomainDataGrantResponse, error)
	DeleteDomainDataGrant(ctx context.Context, in *DeleteDomainDataGrantRequest, opts ...grpc.CallOption) (*DeleteDomainDataGrantResponse, error)
}

type domainDataGrantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainDataGrantServiceClient(cc grpc.ClientConnInterface) DomainDataGrantServiceClient {
	return &domainDataGrantServiceClient{cc}
}

func (c *domainDataGrantServiceClient) CreateDomainDataGrant(ctx context.Context, in *CreateDomainDataGrantRequest, opts ...grpc.CallOption) (*CreateDomainDataGrantResponse, error) {
	out := new(CreateDomainDataGrantResponse)
	err := c.cc.Invoke(ctx, "/kuscia.proto.api.v1alpha1.datamesh.DomainDataGrantService/CreateDomainDataGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainDataGrantServiceClient) QueryDomainDataGrant(ctx context.Context, in *QueryDomainDataGrantRequest, opts ...grpc.CallOption) (*QueryDomainDataGrantResponse, error) {
	out := new(QueryDomainDataGrantResponse)
	err := c.cc.Invoke(ctx, "/kuscia.proto.api.v1alpha1.datamesh.DomainDataGrantService/QueryDomainDataGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainDataGrantServiceClient) UpdateDomainDataGrant(ctx context.Context, in *UpdateDomainDataGrantRequest, opts ...grpc.CallOption) (*UpdateDomainDataGrantResponse, error) {
	out := new(UpdateDomainDataGrantResponse)
	err := c.cc.Invoke(ctx, "/kuscia.proto.api.v1alpha1.datamesh.DomainDataGrantService/UpdateDomainDataGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainDataGrantServiceClient) DeleteDomainDataGrant(ctx context.Context, in *DeleteDomainDataGrantRequest, opts ...grpc.CallOption) (*DeleteDomainDataGrantResponse, error) {
	out := new(DeleteDomainDataGrantResponse)
	err := c.cc.Invoke(ctx, "/kuscia.proto.api.v1alpha1.datamesh.DomainDataGrantService/DeleteDomainDataGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainDataGrantServiceServer is the server API for DomainDataGrantService service.
// All implementations must embed UnimplementedDomainDataGrantServiceServer
// for forward compatibility
type DomainDataGrantServiceServer interface {
	CreateDomainDataGrant(context.Context, *CreateDomainDataGrantRequest) (*CreateDomainDataGrantResponse, error)
	QueryDomainDataGrant(context.Context, *QueryDomainDataGrantRequest) (*QueryDomainDataGrantResponse, error)
	UpdateDomainDataGrant(context.Context, *UpdateDomainDataGrantRequest) (*UpdateDomainDataGrantResponse, error)
	DeleteDomainDataGrant(context.Context, *DeleteDomainDataGrantRequest) (*DeleteDomainDataGrantResponse, error)
	mustEmbedUnimplementedDomainDataGrantServiceServer()
}

// UnimplementedDomainDataGrantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDomainDataGrantServiceServer struct {
}

func (UnimplementedDomainDataGrantServiceServer) CreateDomainDataGrant(context.Context, *CreateDomainDataGrantRequest) (*CreateDomainDataGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomainDataGrant not implemented")
}
func (UnimplementedDomainDataGrantServiceServer) QueryDomainDataGrant(context.Context, *QueryDomainDataGrantRequest) (*QueryDomainDataGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDomainDataGrant not implemented")
}
func (UnimplementedDomainDataGrantServiceServer) UpdateDomainDataGrant(context.Context, *UpdateDomainDataGrantRequest) (*UpdateDomainDataGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomainDataGrant not implemented")
}
func (UnimplementedDomainDataGrantServiceServer) DeleteDomainDataGrant(context.Context, *DeleteDomainDataGrantRequest) (*DeleteDomainDataGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomainDataGrant not implemented")
}
func (UnimplementedDomainDataGrantServiceServer) mustEmbedUnimplementedDomainDataGrantServiceServer() {
}

// UnsafeDomainDataGrantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainDataGrantServiceServer will
// result in compilation errors.
type UnsafeDomainDataGrantServiceServer interface {
	mustEmbedUnimplementedDomainDataGrantServiceServer()
}

func RegisterDomainDataGrantServiceServer(s grpc.ServiceRegistrar, srv DomainDataGrantServiceServer) {
	s.RegisterService(&DomainDataGrantService_ServiceDesc, srv)
}

func _DomainDataGrantService_CreateDomainDataGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainDataGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDataGrantServiceServer).CreateDomainDataGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuscia.proto.api.v1alpha1.datamesh.DomainDataGrantService/CreateDomainDataGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDataGrantServiceServer).CreateDomainDataGrant(ctx, req.(*CreateDomainDataGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainDataGrantService_QueryDomainDataGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDomainDataGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDataGrantServiceServer).QueryDomainDataGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuscia.proto.api.v1alpha1.datamesh.DomainDataGrantService/QueryDomainDataGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDataGrantServiceServer).QueryDomainDataGrant(ctx, req.(*QueryDomainDataGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainDataGrantService_UpdateDomainDataGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainDataGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDataGrantServiceServer).UpdateDomainDataGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuscia.proto.api.v1alpha1.datamesh.DomainDataGrantService/UpdateDomainDataGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDataGrantServiceServer).UpdateDomainDataGrant(ctx, req.(*UpdateDomainDataGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainDataGrantService_DeleteDomainDataGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainDataGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainDataGrantServiceServer).DeleteDomainDataGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuscia.proto.api.v1alpha1.datamesh.DomainDataGrantService/DeleteDomainDataGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainDataGrantServiceServer).DeleteDomainDataGrant(ctx, req.(*DeleteDomainDataGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DomainDataGrantService_ServiceDesc is the grpc.ServiceDesc for DomainDataGrantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DomainDataGrantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kuscia.proto.api.v1alpha1.datamesh.DomainDataGrantService",
	HandlerType: (*DomainDataGrantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDomainDataGrant",
			Handler:    _DomainDataGrantService_CreateDomainDataGrant_Handler,
		},
		{
			MethodName: "QueryDomainDataGrant",
			Handler:    _DomainDataGrantService_QueryDomainDataGrant_Handler,
		},
		{
			MethodName: "UpdateDomainDataGrant",
			Handler:    _DomainDataGrantService_UpdateDomainDataGrant_Handler,
		},
		{
			MethodName: "DeleteDomainDataGrant",
			Handler:    _DomainDataGrantService_DeleteDomainDataGrant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kuscia/proto/api/v1alpha1/datamesh/domaindatagrant.proto",
}
