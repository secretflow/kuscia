// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: kuscia/proto/api/v1alpha1/kusciaapi/domaindata.proto

package kusciaapi

import (
	v1alpha1 "github.com/secretflow/kuscia/proto/api/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateDomainDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *v1alpha1.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Optional, the domaindata_id would be generated by server if the domaindata_id is empty.
	// The unique identity of domaindata,it couldn't duplicate in the same domain.
	DomaindataId string `protobuf:"bytes,2,opt,name=domaindata_id,json=domaindataId,proto3" json:"domaindata_id,omitempty"`
	// The human readable, it could duplicate in the domain.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Enum: table,model,rule,report,unknown
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The relative_uri is relative to the datasource URI, The datasourceURI appends relative_uri is the domaindataURI.
	// e.g. the relative_uri is "train/table.csv"
	//
	//	the URI of datasource is "/home/data"
	//	the URI of domaindata is "/home/data/train/table.csv"
	RelativeUri string `protobuf:"bytes,5,opt,name=relative_uri,json=relativeUri,proto3" json:"relative_uri,omitempty"`
	// Domain_id is the unique identity of the domain. the domaindata is belong to this domain.
	DomainId string `protobuf:"bytes,6,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// Optional, server would use default datasource if datasource_id is empty.
	// The datasource is where the domain is stored.
	DatasourceId string `protobuf:"bytes,7,opt,name=datasource_id,json=datasourceId,proto3" json:"datasource_id,omitempty"`
	// Optional, The attributes of the domaindata, this field use as a extra field, User could set
	// this field to any data what they need.
	Attributes map[string]string `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional, Partition not support now
	Partition *v1alpha1.Partition `protobuf:"bytes,9,opt,name=partition,proto3" json:"partition,omitempty"`
	// This field must be set if the type is 'table',
	// the columns describe the table's schema information.
	Columns []*v1alpha1.DataColumn `protobuf:"bytes,10,rep,name=columns,proto3" json:"columns,omitempty"`
	// Optional , The vendor is the one who outputs the domain data, it may be the SecretFlow engine,
	// another vendor's engine, or manually registered. it's could be manual, secretflow or other vendor string.
	Vendor string `protobuf:"bytes,11,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// file-format only takes effect when the data source type is  localfs or oss. default value is csv
	FileFormat v1alpha1.FileFormat `protobuf:"varint,12,opt,name=file_format,json=fileFormat,proto3,enum=kuscia.proto.api.v1alpha1.FileFormat" json:"file_format,omitempty"`
}

func (x *CreateDomainDataRequest) Reset() {
	*x = CreateDomainDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDomainDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDomainDataRequest) ProtoMessage() {}

func (x *CreateDomainDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDomainDataRequest.ProtoReflect.Descriptor instead.
func (*CreateDomainDataRequest) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDomainDataRequest) GetHeader() *v1alpha1.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateDomainDataRequest) GetDomaindataId() string {
	if x != nil {
		return x.DomaindataId
	}
	return ""
}

func (x *CreateDomainDataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDomainDataRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateDomainDataRequest) GetRelativeUri() string {
	if x != nil {
		return x.RelativeUri
	}
	return ""
}

func (x *CreateDomainDataRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *CreateDomainDataRequest) GetDatasourceId() string {
	if x != nil {
		return x.DatasourceId
	}
	return ""
}

func (x *CreateDomainDataRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateDomainDataRequest) GetPartition() *v1alpha1.Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *CreateDomainDataRequest) GetColumns() []*v1alpha1.DataColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *CreateDomainDataRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *CreateDomainDataRequest) GetFileFormat() v1alpha1.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return v1alpha1.FileFormat(0)
}

type CreateDomainDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *v1alpha1.Status              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Data   *CreateDomainDataResponseData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateDomainDataResponse) Reset() {
	*x = CreateDomainDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDomainDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDomainDataResponse) ProtoMessage() {}

func (x *CreateDomainDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDomainDataResponse.ProtoReflect.Descriptor instead.
func (*CreateDomainDataResponse) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDomainDataResponse) GetStatus() *v1alpha1.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateDomainDataResponse) GetData() *CreateDomainDataResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateDomainDataResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of created datasource
	DomaindataId string `protobuf:"bytes,1,opt,name=domaindata_id,json=domaindataId,proto3" json:"domaindata_id,omitempty"`
}

func (x *CreateDomainDataResponseData) Reset() {
	*x = CreateDomainDataResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDomainDataResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDomainDataResponseData) ProtoMessage() {}

func (x *CreateDomainDataResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDomainDataResponseData.ProtoReflect.Descriptor instead.
func (*CreateDomainDataResponseData) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDomainDataResponseData) GetDomaindataId() string {
	if x != nil {
		return x.DomaindataId
	}
	return ""
}

// UpdateDomainDataRequest : The field would not be updated if the field not set in the UpdateDomainDataRequest
// or the field is invalid.
type UpdateDomainDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *v1alpha1.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Mandatory, The domaindata_id indicate which domaindata would be updated.
	DomaindataId string `protobuf:"bytes,2,opt,name=domaindata_id,json=domaindataId,proto3" json:"domaindata_id,omitempty"`
	// The human-readable name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Enum: table,model,rule,report,unknown
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The relative_uri is relative to the datasource URI, The datasourceURI appends relative_uri is the domaindataURI.
	// e.g. the relative_uri is "train/table.csv"
	//
	//	the URI of datasource is "/home/data"
	//	the URI of domaindata is "/home/data/train/table.csv"
	RelativeUri string `protobuf:"bytes,5,opt,name=relative_uri,json=relativeUri,proto3" json:"relative_uri,omitempty"`
	// Mandatory, The domain_id indicate which domain's domaindata would be updated.
	DomainId string `protobuf:"bytes,6,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// The datasource is where the domain is stored.
	DatasourceId string `protobuf:"bytes,7,opt,name=datasource_id,json=datasourceId,proto3" json:"datasource_id,omitempty"`
	// The attributes of the domaindata, this field use as a extra field, User could set
	// this field to any data that they need.
	Attributes map[string]string `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Partition not support now
	Partition *v1alpha1.Partition `protobuf:"bytes,9,opt,name=partition,proto3" json:"partition,omitempty"`
	// The columns describe the table's schema information.
	Columns []*v1alpha1.DataColumn `protobuf:"bytes,10,rep,name=columns,proto3" json:"columns,omitempty"`
	// Optional , The vendor is the one who outputs the domain data, it may be the SecretFlow engine,
	// another vendor's engine, or manually registered. it's could be manual, secretflow or other vendor string.
	Vendor string `protobuf:"bytes,11,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// file-format only takes effect when the data source type is  localfs or oss. default value is csv
	FileFormat v1alpha1.FileFormat `protobuf:"varint,12,opt,name=file_format,json=fileFormat,proto3,enum=kuscia.proto.api.v1alpha1.FileFormat" json:"file_format,omitempty"`
}

func (x *UpdateDomainDataRequest) Reset() {
	*x = UpdateDomainDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDomainDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDomainDataRequest) ProtoMessage() {}

func (x *UpdateDomainDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDomainDataRequest.ProtoReflect.Descriptor instead.
func (*UpdateDomainDataRequest) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateDomainDataRequest) GetHeader() *v1alpha1.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateDomainDataRequest) GetDomaindataId() string {
	if x != nil {
		return x.DomaindataId
	}
	return ""
}

func (x *UpdateDomainDataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDomainDataRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateDomainDataRequest) GetRelativeUri() string {
	if x != nil {
		return x.RelativeUri
	}
	return ""
}

func (x *UpdateDomainDataRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *UpdateDomainDataRequest) GetDatasourceId() string {
	if x != nil {
		return x.DatasourceId
	}
	return ""
}

func (x *UpdateDomainDataRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *UpdateDomainDataRequest) GetPartition() *v1alpha1.Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *UpdateDomainDataRequest) GetColumns() []*v1alpha1.DataColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *UpdateDomainDataRequest) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *UpdateDomainDataRequest) GetFileFormat() v1alpha1.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return v1alpha1.FileFormat(0)
}

type UpdateDomainDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *v1alpha1.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateDomainDataResponse) Reset() {
	*x = UpdateDomainDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDomainDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDomainDataResponse) ProtoMessage() {}

func (x *UpdateDomainDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDomainDataResponse.ProtoReflect.Descriptor instead.
func (*UpdateDomainDataResponse) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateDomainDataResponse) GetStatus() *v1alpha1.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeleteDomainDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *v1alpha1.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// domaindata id
	DomainId     string `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	DomaindataId string `protobuf:"bytes,3,opt,name=domaindata_id,json=domaindataId,proto3" json:"domaindata_id,omitempty"`
}

func (x *DeleteDomainDataRequest) Reset() {
	*x = DeleteDomainDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDomainDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDomainDataRequest) ProtoMessage() {}

func (x *DeleteDomainDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDomainDataRequest.ProtoReflect.Descriptor instead.
func (*DeleteDomainDataRequest) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteDomainDataRequest) GetHeader() *v1alpha1.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteDomainDataRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *DeleteDomainDataRequest) GetDomaindataId() string {
	if x != nil {
		return x.DomaindataId
	}
	return ""
}

type DeleteDomainDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *v1alpha1.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteDomainDataResponse) Reset() {
	*x = DeleteDomainDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDomainDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDomainDataResponse) ProtoMessage() {}

func (x *DeleteDomainDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDomainDataResponse.ProtoReflect.Descriptor instead.
func (*DeleteDomainDataResponse) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteDomainDataResponse) GetStatus() *v1alpha1.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type QueryDomainDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *v1alpha1.RequestHeader     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *QueryDomainDataRequestData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryDomainDataRequest) Reset() {
	*x = QueryDomainDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDomainDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDomainDataRequest) ProtoMessage() {}

func (x *QueryDomainDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDomainDataRequest.ProtoReflect.Descriptor instead.
func (*QueryDomainDataRequest) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{7}
}

func (x *QueryDomainDataRequest) GetHeader() *v1alpha1.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *QueryDomainDataRequest) GetData() *QueryDomainDataRequestData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryDomainDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *v1alpha1.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Data   *DomainData      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryDomainDataResponse) Reset() {
	*x = QueryDomainDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDomainDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDomainDataResponse) ProtoMessage() {}

func (x *QueryDomainDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDomainDataResponse.ProtoReflect.Descriptor instead.
func (*QueryDomainDataResponse) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{8}
}

func (x *QueryDomainDataResponse) GetStatus() *v1alpha1.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *QueryDomainDataResponse) GetData() *DomainData {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryDomainDataRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainId     string `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	DomaindataId string `protobuf:"bytes,2,opt,name=domaindata_id,json=domaindataId,proto3" json:"domaindata_id,omitempty"`
}

func (x *QueryDomainDataRequestData) Reset() {
	*x = QueryDomainDataRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDomainDataRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDomainDataRequestData) ProtoMessage() {}

func (x *QueryDomainDataRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDomainDataRequestData.ProtoReflect.Descriptor instead.
func (*QueryDomainDataRequestData) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{9}
}

func (x *QueryDomainDataRequestData) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *QueryDomainDataRequestData) GetDomaindataId() string {
	if x != nil {
		return x.DomaindataId
	}
	return ""
}

type BatchQueryDomainDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *v1alpha1.RequestHeader       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   []*QueryDomainDataRequestData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BatchQueryDomainDataRequest) Reset() {
	*x = BatchQueryDomainDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryDomainDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryDomainDataRequest) ProtoMessage() {}

func (x *BatchQueryDomainDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryDomainDataRequest.ProtoReflect.Descriptor instead.
func (*BatchQueryDomainDataRequest) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{10}
}

func (x *BatchQueryDomainDataRequest) GetHeader() *v1alpha1.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BatchQueryDomainDataRequest) GetData() []*QueryDomainDataRequestData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchQueryDomainDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *v1alpha1.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Data   *DomainDataList  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BatchQueryDomainDataResponse) Reset() {
	*x = BatchQueryDomainDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryDomainDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryDomainDataResponse) ProtoMessage() {}

func (x *BatchQueryDomainDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryDomainDataResponse.ProtoReflect.Descriptor instead.
func (*BatchQueryDomainDataResponse) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{11}
}

func (x *BatchQueryDomainDataResponse) GetStatus() *v1alpha1.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatchQueryDomainDataResponse) GetData() *DomainDataList {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListDomainDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *v1alpha1.RequestHeader    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Data   *ListDomainDataRequestData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListDomainDataRequest) Reset() {
	*x = ListDomainDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDomainDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainDataRequest) ProtoMessage() {}

func (x *ListDomainDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainDataRequest.ProtoReflect.Descriptor instead.
func (*ListDomainDataRequest) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{12}
}

func (x *ListDomainDataRequest) GetHeader() *v1alpha1.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListDomainDataRequest) GetData() *ListDomainDataRequestData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListDomainDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *v1alpha1.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Data   *DomainDataList  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListDomainDataResponse) Reset() {
	*x = ListDomainDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDomainDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainDataResponse) ProtoMessage() {}

func (x *ListDomainDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainDataResponse.ProtoReflect.Descriptor instead.
func (*ListDomainDataResponse) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{13}
}

func (x *ListDomainDataResponse) GetStatus() *v1alpha1.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListDomainDataResponse) GetData() *DomainDataList {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListDomainDataRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// couldn't be empty
	DomainId string `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// Optional, The domaindata_type would be use as the filter condition to list the domaindata.
	DomaindataType string `protobuf:"bytes,2,opt,name=domaindata_type,json=domaindataType,proto3" json:"domaindata_type,omitempty"`
	// Optional, the domaindata_vendor would be use as the filter condition to list the domaindata.
	DomaindataVendor string `protobuf:"bytes,3,opt,name=domaindata_vendor,json=domaindataVendor,proto3" json:"domaindata_vendor,omitempty"`
}

func (x *ListDomainDataRequestData) Reset() {
	*x = ListDomainDataRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDomainDataRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDomainDataRequestData) ProtoMessage() {}

func (x *ListDomainDataRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDomainDataRequestData.ProtoReflect.Descriptor instead.
func (*ListDomainDataRequestData) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{14}
}

func (x *ListDomainDataRequestData) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *ListDomainDataRequestData) GetDomaindataType() string {
	if x != nil {
		return x.DomaindataType
	}
	return ""
}

func (x *ListDomainDataRequestData) GetDomaindataVendor() string {
	if x != nil {
		return x.DomaindataVendor
	}
	return ""
}

type DomainDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomaindataList []*DomainData `protobuf:"bytes,1,rep,name=domaindata_list,json=domaindataList,proto3" json:"domaindata_list,omitempty"`
}

func (x *DomainDataList) Reset() {
	*x = DomainDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainDataList) ProtoMessage() {}

func (x *DomainDataList) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainDataList.ProtoReflect.Descriptor instead.
func (*DomainDataList) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{15}
}

func (x *DomainDataList) GetDomaindataList() []*DomainData {
	if x != nil {
		return x.DomaindataList
	}
	return nil
}

type DomainData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domaindata_id is the identification of domaindata, it couldn't duplicate in the same domain.
	DomaindataId string `protobuf:"bytes,1,opt,name=domaindata_id,json=domaindataId,proto3" json:"domaindata_id,omitempty"`
	// The human readable, it could duplicate in the domain.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DomainData type , Enum: table,model,rule,report,unknown
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The relative_uri is relative to the datasource URI, The datasourceURI appends relative_uri is the domaindataURI.
	// e.g. the relative_uri is "train/table.csv"
	//
	//	the URI of datasource is "/home/data"
	//	the URI of domaindata is "/home/data/train/table.csv"
	RelativeUri string `protobuf:"bytes,4,opt,name=relative_uri,json=relativeUri,proto3" json:"relative_uri,omitempty"`
	// domain_id the unique identity of the domain. the domaindata is belong to this domain.
	DomainId string `protobuf:"bytes,5,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// datasource_id is the identity of the domaindatasource, the domaindatasource that storage the domaindata file.
	DatasourceId string `protobuf:"bytes,6,opt,name=datasource_id,json=datasourceId,proto3" json:"datasource_id,omitempty"`
	// The attributes of the domaindata, this field use as a extra field, User could set
	// this field to any data that they need.
	Attributes map[string]string `protobuf:"bytes,7,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Partition not support now,
	Partition *v1alpha1.Partition `protobuf:"bytes,8,opt,name=partition,proto3" json:"partition,omitempty"`
	// This field must be set if the type is 'table',
	// The columns describe the table's schema information.
	Columns []*v1alpha1.DataColumn `protobuf:"bytes,9,rep,name=columns,proto3" json:"columns,omitempty"`
	// The vendor is the one who outputs the domain data, it may be the SecretFlow engine,
	// another vendor's engine, or manually registered. it's could be manual, secretflow or other vendor string.
	Vendor string `protobuf:"bytes,10,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// The status of the domaindata , enum: Available,Unavailable
	Status string `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Author string `protobuf:"bytes,12,opt,name=author,proto3" json:"author,omitempty"`
	// file-format only takes effect when the data source type is  localfs or oss. default value is csv
	FileFormat v1alpha1.FileFormat `protobuf:"varint,13,opt,name=file_format,json=fileFormat,proto3,enum=kuscia.proto.api.v1alpha1.FileFormat" json:"file_format,omitempty"`
}

func (x *DomainData) Reset() {
	*x = DomainData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainData) ProtoMessage() {}

func (x *DomainData) ProtoReflect() protoreflect.Message {
	mi := &file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainData.ProtoReflect.Descriptor instead.
func (*DomainData) Descriptor() ([]byte, []int) {
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP(), []int{16}
}

func (x *DomainData) GetDomaindataId() string {
	if x != nil {
		return x.DomaindataId
	}
	return ""
}

func (x *DomainData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DomainData) GetRelativeUri() string {
	if x != nil {
		return x.RelativeUri
	}
	return ""
}

func (x *DomainData) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *DomainData) GetDatasourceId() string {
	if x != nil {
		return x.DatasourceId
	}
	return ""
}

func (x *DomainData) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *DomainData) GetPartition() *v1alpha1.Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *DomainData) GetColumns() []*v1alpha1.DataColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *DomainData) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DomainData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DomainData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *DomainData) GetFileFormat() v1alpha1.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return v1alpha1.FileFormat(0)
}

var File_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto protoreflect.FileDescriptor

var file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDesc = []byte{
	0x0a, 0x34, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6b, 0x75, 0x73, 0x63,
	0x69, 0x61, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x1a, 0x26, 0x6b, 0x75, 0x73,
	0x63, 0x69, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x05, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x72,
	0x69, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x46,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6b, 0x75,
	0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x22, 0x9f, 0x05, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x75, 0x73,
	0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b,
	0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6b, 0x75, 0x73, 0x63,
	0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0x3d, 0x0a, 0x0f,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x22, 0x55, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x16, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x01, 0x0a, 0x17,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73,
	0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa2,
	0x01, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xad, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x52, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x22, 0x6a, 0x0a, 0x0e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xf3, 0x04, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x5f, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x46,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x82, 0x07, 0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3c, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73,
	0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69,
	0x61, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3c, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b,
	0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73,
	0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8f, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b,
	0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b,
	0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x9b, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x2e, 0x6b, 0x75, 0x73, 0x63,
	0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6b, 0x75,
	0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89,
	0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75,
	0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x5e, 0x0a, 0x21, 0x6f, 0x72,
	0x67, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x5a,
	0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x6b, 0x75, 0x73, 0x63, 0x69, 0x61, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescOnce sync.Once
	file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescData = file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDesc
)

func file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescGZIP() []byte {
	file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescOnce.Do(func() {
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescData = protoimpl.X.CompressGZIP(file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescData)
	})
	return file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDescData
}

var file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_goTypes = []interface{}{
	(*CreateDomainDataRequest)(nil),      // 0: kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataRequest
	(*CreateDomainDataResponse)(nil),     // 1: kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataResponse
	(*CreateDomainDataResponseData)(nil), // 2: kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataResponseData
	(*UpdateDomainDataRequest)(nil),      // 3: kuscia.proto.api.v1alpha1.kusciaapi.UpdateDomainDataRequest
	(*UpdateDomainDataResponse)(nil),     // 4: kuscia.proto.api.v1alpha1.kusciaapi.UpdateDomainDataResponse
	(*DeleteDomainDataRequest)(nil),      // 5: kuscia.proto.api.v1alpha1.kusciaapi.DeleteDomainDataRequest
	(*DeleteDomainDataResponse)(nil),     // 6: kuscia.proto.api.v1alpha1.kusciaapi.DeleteDomainDataResponse
	(*QueryDomainDataRequest)(nil),       // 7: kuscia.proto.api.v1alpha1.kusciaapi.QueryDomainDataRequest
	(*QueryDomainDataResponse)(nil),      // 8: kuscia.proto.api.v1alpha1.kusciaapi.QueryDomainDataResponse
	(*QueryDomainDataRequestData)(nil),   // 9: kuscia.proto.api.v1alpha1.kusciaapi.QueryDomainDataRequestData
	(*BatchQueryDomainDataRequest)(nil),  // 10: kuscia.proto.api.v1alpha1.kusciaapi.BatchQueryDomainDataRequest
	(*BatchQueryDomainDataResponse)(nil), // 11: kuscia.proto.api.v1alpha1.kusciaapi.BatchQueryDomainDataResponse
	(*ListDomainDataRequest)(nil),        // 12: kuscia.proto.api.v1alpha1.kusciaapi.ListDomainDataRequest
	(*ListDomainDataResponse)(nil),       // 13: kuscia.proto.api.v1alpha1.kusciaapi.ListDomainDataResponse
	(*ListDomainDataRequestData)(nil),    // 14: kuscia.proto.api.v1alpha1.kusciaapi.ListDomainDataRequestData
	(*DomainDataList)(nil),               // 15: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataList
	(*DomainData)(nil),                   // 16: kuscia.proto.api.v1alpha1.kusciaapi.DomainData
	nil,                                  // 17: kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataRequest.AttributesEntry
	nil,                                  // 18: kuscia.proto.api.v1alpha1.kusciaapi.UpdateDomainDataRequest.AttributesEntry
	nil,                                  // 19: kuscia.proto.api.v1alpha1.kusciaapi.DomainData.AttributesEntry
	(*v1alpha1.RequestHeader)(nil),       // 20: kuscia.proto.api.v1alpha1.RequestHeader
	(*v1alpha1.Partition)(nil),           // 21: kuscia.proto.api.v1alpha1.Partition
	(*v1alpha1.DataColumn)(nil),          // 22: kuscia.proto.api.v1alpha1.DataColumn
	(v1alpha1.FileFormat)(0),             // 23: kuscia.proto.api.v1alpha1.FileFormat
	(*v1alpha1.Status)(nil),              // 24: kuscia.proto.api.v1alpha1.Status
}
var file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_depIdxs = []int32{
	20, // 0: kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataRequest.header:type_name -> kuscia.proto.api.v1alpha1.RequestHeader
	17, // 1: kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataRequest.attributes:type_name -> kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataRequest.AttributesEntry
	21, // 2: kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataRequest.partition:type_name -> kuscia.proto.api.v1alpha1.Partition
	22, // 3: kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataRequest.columns:type_name -> kuscia.proto.api.v1alpha1.DataColumn
	23, // 4: kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataRequest.file_format:type_name -> kuscia.proto.api.v1alpha1.FileFormat
	24, // 5: kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataResponse.status:type_name -> kuscia.proto.api.v1alpha1.Status
	2,  // 6: kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataResponse.data:type_name -> kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataResponseData
	20, // 7: kuscia.proto.api.v1alpha1.kusciaapi.UpdateDomainDataRequest.header:type_name -> kuscia.proto.api.v1alpha1.RequestHeader
	18, // 8: kuscia.proto.api.v1alpha1.kusciaapi.UpdateDomainDataRequest.attributes:type_name -> kuscia.proto.api.v1alpha1.kusciaapi.UpdateDomainDataRequest.AttributesEntry
	21, // 9: kuscia.proto.api.v1alpha1.kusciaapi.UpdateDomainDataRequest.partition:type_name -> kuscia.proto.api.v1alpha1.Partition
	22, // 10: kuscia.proto.api.v1alpha1.kusciaapi.UpdateDomainDataRequest.columns:type_name -> kuscia.proto.api.v1alpha1.DataColumn
	23, // 11: kuscia.proto.api.v1alpha1.kusciaapi.UpdateDomainDataRequest.file_format:type_name -> kuscia.proto.api.v1alpha1.FileFormat
	24, // 12: kuscia.proto.api.v1alpha1.kusciaapi.UpdateDomainDataResponse.status:type_name -> kuscia.proto.api.v1alpha1.Status
	20, // 13: kuscia.proto.api.v1alpha1.kusciaapi.DeleteDomainDataRequest.header:type_name -> kuscia.proto.api.v1alpha1.RequestHeader
	24, // 14: kuscia.proto.api.v1alpha1.kusciaapi.DeleteDomainDataResponse.status:type_name -> kuscia.proto.api.v1alpha1.Status
	20, // 15: kuscia.proto.api.v1alpha1.kusciaapi.QueryDomainDataRequest.header:type_name -> kuscia.proto.api.v1alpha1.RequestHeader
	9,  // 16: kuscia.proto.api.v1alpha1.kusciaapi.QueryDomainDataRequest.data:type_name -> kuscia.proto.api.v1alpha1.kusciaapi.QueryDomainDataRequestData
	24, // 17: kuscia.proto.api.v1alpha1.kusciaapi.QueryDomainDataResponse.status:type_name -> kuscia.proto.api.v1alpha1.Status
	16, // 18: kuscia.proto.api.v1alpha1.kusciaapi.QueryDomainDataResponse.data:type_name -> kuscia.proto.api.v1alpha1.kusciaapi.DomainData
	20, // 19: kuscia.proto.api.v1alpha1.kusciaapi.BatchQueryDomainDataRequest.header:type_name -> kuscia.proto.api.v1alpha1.RequestHeader
	9,  // 20: kuscia.proto.api.v1alpha1.kusciaapi.BatchQueryDomainDataRequest.data:type_name -> kuscia.proto.api.v1alpha1.kusciaapi.QueryDomainDataRequestData
	24, // 21: kuscia.proto.api.v1alpha1.kusciaapi.BatchQueryDomainDataResponse.status:type_name -> kuscia.proto.api.v1alpha1.Status
	15, // 22: kuscia.proto.api.v1alpha1.kusciaapi.BatchQueryDomainDataResponse.data:type_name -> kuscia.proto.api.v1alpha1.kusciaapi.DomainDataList
	20, // 23: kuscia.proto.api.v1alpha1.kusciaapi.ListDomainDataRequest.header:type_name -> kuscia.proto.api.v1alpha1.RequestHeader
	14, // 24: kuscia.proto.api.v1alpha1.kusciaapi.ListDomainDataRequest.data:type_name -> kuscia.proto.api.v1alpha1.kusciaapi.ListDomainDataRequestData
	24, // 25: kuscia.proto.api.v1alpha1.kusciaapi.ListDomainDataResponse.status:type_name -> kuscia.proto.api.v1alpha1.Status
	15, // 26: kuscia.proto.api.v1alpha1.kusciaapi.ListDomainDataResponse.data:type_name -> kuscia.proto.api.v1alpha1.kusciaapi.DomainDataList
	16, // 27: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataList.domaindata_list:type_name -> kuscia.proto.api.v1alpha1.kusciaapi.DomainData
	19, // 28: kuscia.proto.api.v1alpha1.kusciaapi.DomainData.attributes:type_name -> kuscia.proto.api.v1alpha1.kusciaapi.DomainData.AttributesEntry
	21, // 29: kuscia.proto.api.v1alpha1.kusciaapi.DomainData.partition:type_name -> kuscia.proto.api.v1alpha1.Partition
	22, // 30: kuscia.proto.api.v1alpha1.kusciaapi.DomainData.columns:type_name -> kuscia.proto.api.v1alpha1.DataColumn
	23, // 31: kuscia.proto.api.v1alpha1.kusciaapi.DomainData.file_format:type_name -> kuscia.proto.api.v1alpha1.FileFormat
	0,  // 32: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataService.CreateDomainData:input_type -> kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataRequest
	3,  // 33: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataService.UpdateDomainData:input_type -> kuscia.proto.api.v1alpha1.kusciaapi.UpdateDomainDataRequest
	5,  // 34: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataService.DeleteDomainData:input_type -> kuscia.proto.api.v1alpha1.kusciaapi.DeleteDomainDataRequest
	7,  // 35: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataService.QueryDomainData:input_type -> kuscia.proto.api.v1alpha1.kusciaapi.QueryDomainDataRequest
	10, // 36: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataService.BatchQueryDomainData:input_type -> kuscia.proto.api.v1alpha1.kusciaapi.BatchQueryDomainDataRequest
	12, // 37: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataService.ListDomainData:input_type -> kuscia.proto.api.v1alpha1.kusciaapi.ListDomainDataRequest
	1,  // 38: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataService.CreateDomainData:output_type -> kuscia.proto.api.v1alpha1.kusciaapi.CreateDomainDataResponse
	4,  // 39: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataService.UpdateDomainData:output_type -> kuscia.proto.api.v1alpha1.kusciaapi.UpdateDomainDataResponse
	6,  // 40: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataService.DeleteDomainData:output_type -> kuscia.proto.api.v1alpha1.kusciaapi.DeleteDomainDataResponse
	8,  // 41: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataService.QueryDomainData:output_type -> kuscia.proto.api.v1alpha1.kusciaapi.QueryDomainDataResponse
	11, // 42: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataService.BatchQueryDomainData:output_type -> kuscia.proto.api.v1alpha1.kusciaapi.BatchQueryDomainDataResponse
	13, // 43: kuscia.proto.api.v1alpha1.kusciaapi.DomainDataService.ListDomainData:output_type -> kuscia.proto.api.v1alpha1.kusciaapi.ListDomainDataResponse
	38, // [38:44] is the sub-list for method output_type
	32, // [32:38] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_init() }
func file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_init() {
	if File_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDomainDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDomainDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDomainDataResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDomainDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDomainDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDomainDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDomainDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDomainDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDomainDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDomainDataRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryDomainDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryDomainDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDomainDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDomainDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDomainDataRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_goTypes,
		DependencyIndexes: file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_depIdxs,
		MessageInfos:      file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_msgTypes,
	}.Build()
	File_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto = out.File
	file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_rawDesc = nil
	file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_goTypes = nil
	file_kuscia_proto_api_v1alpha1_kusciaapi_domaindata_proto_depIdxs = nil
}
