// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kusciaapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServingServiceClient is the client API for ServingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServingServiceClient interface {
	CreateServing(ctx context.Context, in *CreateServingRequest, opts ...grpc.CallOption) (*CreateServingResponse, error)
	QueryServing(ctx context.Context, in *QueryServingRequest, opts ...grpc.CallOption) (*QueryServingResponse, error)
	UpdateServing(ctx context.Context, in *UpdateServingRequest, opts ...grpc.CallOption) (*UpdateServingResponse, error)
	DeleteServing(ctx context.Context, in *DeleteServingRequest, opts ...grpc.CallOption) (*DeleteServingResponse, error)
	BatchQueryServingStatus(ctx context.Context, in *BatchQueryServingStatusRequest, opts ...grpc.CallOption) (*BatchQueryServingStatusResponse, error)
}

type servingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServingServiceClient(cc grpc.ClientConnInterface) ServingServiceClient {
	return &servingServiceClient{cc}
}

func (c *servingServiceClient) CreateServing(ctx context.Context, in *CreateServingRequest, opts ...grpc.CallOption) (*CreateServingResponse, error) {
	out := new(CreateServingResponse)
	err := c.cc.Invoke(ctx, "/kuscia.proto.api.v1alpha1.kusciaapi.ServingService/CreateServing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servingServiceClient) QueryServing(ctx context.Context, in *QueryServingRequest, opts ...grpc.CallOption) (*QueryServingResponse, error) {
	out := new(QueryServingResponse)
	err := c.cc.Invoke(ctx, "/kuscia.proto.api.v1alpha1.kusciaapi.ServingService/QueryServing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servingServiceClient) UpdateServing(ctx context.Context, in *UpdateServingRequest, opts ...grpc.CallOption) (*UpdateServingResponse, error) {
	out := new(UpdateServingResponse)
	err := c.cc.Invoke(ctx, "/kuscia.proto.api.v1alpha1.kusciaapi.ServingService/UpdateServing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servingServiceClient) DeleteServing(ctx context.Context, in *DeleteServingRequest, opts ...grpc.CallOption) (*DeleteServingResponse, error) {
	out := new(DeleteServingResponse)
	err := c.cc.Invoke(ctx, "/kuscia.proto.api.v1alpha1.kusciaapi.ServingService/DeleteServing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servingServiceClient) BatchQueryServingStatus(ctx context.Context, in *BatchQueryServingStatusRequest, opts ...grpc.CallOption) (*BatchQueryServingStatusResponse, error) {
	out := new(BatchQueryServingStatusResponse)
	err := c.cc.Invoke(ctx, "/kuscia.proto.api.v1alpha1.kusciaapi.ServingService/BatchQueryServingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServingServiceServer is the server API for ServingService service.
// All implementations must embed UnimplementedServingServiceServer
// for forward compatibility
type ServingServiceServer interface {
	CreateServing(context.Context, *CreateServingRequest) (*CreateServingResponse, error)
	QueryServing(context.Context, *QueryServingRequest) (*QueryServingResponse, error)
	UpdateServing(context.Context, *UpdateServingRequest) (*UpdateServingResponse, error)
	DeleteServing(context.Context, *DeleteServingRequest) (*DeleteServingResponse, error)
	BatchQueryServingStatus(context.Context, *BatchQueryServingStatusRequest) (*BatchQueryServingStatusResponse, error)
	mustEmbedUnimplementedServingServiceServer()
}

// UnimplementedServingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServingServiceServer struct {
}

func (UnimplementedServingServiceServer) CreateServing(context.Context, *CreateServingRequest) (*CreateServingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServing not implemented")
}
func (UnimplementedServingServiceServer) QueryServing(context.Context, *QueryServingRequest) (*QueryServingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryServing not implemented")
}
func (UnimplementedServingServiceServer) UpdateServing(context.Context, *UpdateServingRequest) (*UpdateServingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServing not implemented")
}
func (UnimplementedServingServiceServer) DeleteServing(context.Context, *DeleteServingRequest) (*DeleteServingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServing not implemented")
}
func (UnimplementedServingServiceServer) BatchQueryServingStatus(context.Context, *BatchQueryServingStatusRequest) (*BatchQueryServingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryServingStatus not implemented")
}
func (UnimplementedServingServiceServer) mustEmbedUnimplementedServingServiceServer() {}

// UnsafeServingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServingServiceServer will
// result in compilation errors.
type UnsafeServingServiceServer interface {
	mustEmbedUnimplementedServingServiceServer()
}

func RegisterServingServiceServer(s grpc.ServiceRegistrar, srv ServingServiceServer) {
	s.RegisterService(&ServingService_ServiceDesc, srv)
}

func _ServingService_CreateServing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServingServiceServer).CreateServing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuscia.proto.api.v1alpha1.kusciaapi.ServingService/CreateServing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServingServiceServer).CreateServing(ctx, req.(*CreateServingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServingService_QueryServing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServingServiceServer).QueryServing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuscia.proto.api.v1alpha1.kusciaapi.ServingService/QueryServing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServingServiceServer).QueryServing(ctx, req.(*QueryServingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServingService_UpdateServing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServingServiceServer).UpdateServing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuscia.proto.api.v1alpha1.kusciaapi.ServingService/UpdateServing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServingServiceServer).UpdateServing(ctx, req.(*UpdateServingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServingService_DeleteServing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServingServiceServer).DeleteServing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuscia.proto.api.v1alpha1.kusciaapi.ServingService/DeleteServing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServingServiceServer).DeleteServing(ctx, req.(*DeleteServingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServingService_BatchQueryServingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryServingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServingServiceServer).BatchQueryServingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kuscia.proto.api.v1alpha1.kusciaapi.ServingService/BatchQueryServingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServingServiceServer).BatchQueryServingStatus(ctx, req.(*BatchQueryServingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServingService_ServiceDesc is the grpc.ServiceDesc for ServingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kuscia.proto.api.v1alpha1.kusciaapi.ServingService",
	HandlerType: (*ServingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServing",
			Handler:    _ServingService_CreateServing_Handler,
		},
		{
			MethodName: "QueryServing",
			Handler:    _ServingService_QueryServing_Handler,
		},
		{
			MethodName: "UpdateServing",
			Handler:    _ServingService_UpdateServing_Handler,
		},
		{
			MethodName: "DeleteServing",
			Handler:    _ServingService_DeleteServing_Handler,
		},
		{
			MethodName: "BatchQueryServingStatus",
			Handler:    _ServingService_BatchQueryServingStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kuscia/proto/api/v1alpha1/kusciaapi/serving.proto",
}
