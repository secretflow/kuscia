// Copyright 2024 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.8
// source: kuscia/proto/api/v1alpha1/kusciaapi/log.proto

package kusciaapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogService_QueryLog_FullMethodName     = "/kuscia.proto.api.v1alpha1.kusciaapi.LogService/QueryLog"
	LogService_QueryPodNode_FullMethodName = "/kuscia.proto.api.v1alpha1.kusciaapi.LogService/QueryPodNode"
)

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServiceClient interface {
	QueryLog(ctx context.Context, in *QueryLogRequest, opts ...grpc.CallOption) (LogService_QueryLogClient, error)
	QueryPodNode(ctx context.Context, in *QueryPodNodeRequest, opts ...grpc.CallOption) (*QueryPodNodeResponse, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) QueryLog(ctx context.Context, in *QueryLogRequest, opts ...grpc.CallOption) (LogService_QueryLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[0], LogService_QueryLog_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceQueryLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogService_QueryLogClient interface {
	Recv() (*QueryLogResponse, error)
	grpc.ClientStream
}

type logServiceQueryLogClient struct {
	grpc.ClientStream
}

func (x *logServiceQueryLogClient) Recv() (*QueryLogResponse, error) {
	m := new(QueryLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) QueryPodNode(ctx context.Context, in *QueryPodNodeRequest, opts ...grpc.CallOption) (*QueryPodNodeResponse, error) {
	out := new(QueryPodNodeResponse)
	err := c.cc.Invoke(ctx, LogService_QueryPodNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations must embed UnimplementedLogServiceServer
// for forward compatibility
type LogServiceServer interface {
	QueryLog(*QueryLogRequest, LogService_QueryLogServer) error
	QueryPodNode(context.Context, *QueryPodNodeRequest) (*QueryPodNodeResponse, error)
	mustEmbedUnimplementedLogServiceServer()
}

// UnimplementedLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (UnimplementedLogServiceServer) QueryLog(*QueryLogRequest, LogService_QueryLogServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryLog not implemented")
}
func (UnimplementedLogServiceServer) QueryPodNode(context.Context, *QueryPodNodeRequest) (*QueryPodNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPodNode not implemented")
}
func (UnimplementedLogServiceServer) mustEmbedUnimplementedLogServiceServer() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_QueryLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).QueryLog(m, &logServiceQueryLogServer{stream})
}

type LogService_QueryLogServer interface {
	Send(*QueryLogResponse) error
	grpc.ServerStream
}

type logServiceQueryLogServer struct {
	grpc.ServerStream
}

func (x *logServiceQueryLogServer) Send(m *QueryLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LogService_QueryPodNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPodNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).QueryPodNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_QueryPodNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).QueryPodNode(ctx, req.(*QueryPodNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kuscia.proto.api.v1alpha1.kusciaapi.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryPodNode",
			Handler:    _LogService_QueryPodNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryLog",
			Handler:       _LogService_QueryLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kuscia/proto/api/v1alpha1/kusciaapi/log.proto",
}
