// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.8
// source: kuscia/proto/api/v1alpha1/kusciaapi/domain_route.proto

package kusciaapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DomainRouteService_CreateDomainRoute_FullMethodName           = "/kuscia.proto.api.v1alpha1.kusciaapi.DomainRouteService/CreateDomainRoute"
	DomainRouteService_DeleteDomainRoute_FullMethodName           = "/kuscia.proto.api.v1alpha1.kusciaapi.DomainRouteService/DeleteDomainRoute"
	DomainRouteService_QueryDomainRoute_FullMethodName            = "/kuscia.proto.api.v1alpha1.kusciaapi.DomainRouteService/QueryDomainRoute"
	DomainRouteService_BatchQueryDomainRouteStatus_FullMethodName = "/kuscia.proto.api.v1alpha1.kusciaapi.DomainRouteService/BatchQueryDomainRouteStatus"
)

// DomainRouteServiceClient is the client API for DomainRouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainRouteServiceClient interface {
	CreateDomainRoute(ctx context.Context, in *CreateDomainRouteRequest, opts ...grpc.CallOption) (*CreateDomainRouteResponse, error)
	DeleteDomainRoute(ctx context.Context, in *DeleteDomainRouteRequest, opts ...grpc.CallOption) (*DeleteDomainRouteResponse, error)
	QueryDomainRoute(ctx context.Context, in *QueryDomainRouteRequest, opts ...grpc.CallOption) (*QueryDomainRouteResponse, error)
	BatchQueryDomainRouteStatus(ctx context.Context, in *BatchQueryDomainRouteStatusRequest, opts ...grpc.CallOption) (*BatchQueryDomainRouteStatusResponse, error)
}

type domainRouteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainRouteServiceClient(cc grpc.ClientConnInterface) DomainRouteServiceClient {
	return &domainRouteServiceClient{cc}
}

func (c *domainRouteServiceClient) CreateDomainRoute(ctx context.Context, in *CreateDomainRouteRequest, opts ...grpc.CallOption) (*CreateDomainRouteResponse, error) {
	out := new(CreateDomainRouteResponse)
	err := c.cc.Invoke(ctx, DomainRouteService_CreateDomainRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainRouteServiceClient) DeleteDomainRoute(ctx context.Context, in *DeleteDomainRouteRequest, opts ...grpc.CallOption) (*DeleteDomainRouteResponse, error) {
	out := new(DeleteDomainRouteResponse)
	err := c.cc.Invoke(ctx, DomainRouteService_DeleteDomainRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainRouteServiceClient) QueryDomainRoute(ctx context.Context, in *QueryDomainRouteRequest, opts ...grpc.CallOption) (*QueryDomainRouteResponse, error) {
	out := new(QueryDomainRouteResponse)
	err := c.cc.Invoke(ctx, DomainRouteService_QueryDomainRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainRouteServiceClient) BatchQueryDomainRouteStatus(ctx context.Context, in *BatchQueryDomainRouteStatusRequest, opts ...grpc.CallOption) (*BatchQueryDomainRouteStatusResponse, error) {
	out := new(BatchQueryDomainRouteStatusResponse)
	err := c.cc.Invoke(ctx, DomainRouteService_BatchQueryDomainRouteStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainRouteServiceServer is the server API for DomainRouteService service.
// All implementations must embed UnimplementedDomainRouteServiceServer
// for forward compatibility
type DomainRouteServiceServer interface {
	CreateDomainRoute(context.Context, *CreateDomainRouteRequest) (*CreateDomainRouteResponse, error)
	DeleteDomainRoute(context.Context, *DeleteDomainRouteRequest) (*DeleteDomainRouteResponse, error)
	QueryDomainRoute(context.Context, *QueryDomainRouteRequest) (*QueryDomainRouteResponse, error)
	BatchQueryDomainRouteStatus(context.Context, *BatchQueryDomainRouteStatusRequest) (*BatchQueryDomainRouteStatusResponse, error)
	mustEmbedUnimplementedDomainRouteServiceServer()
}

// UnimplementedDomainRouteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDomainRouteServiceServer struct {
}

func (UnimplementedDomainRouteServiceServer) CreateDomainRoute(context.Context, *CreateDomainRouteRequest) (*CreateDomainRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomainRoute not implemented")
}
func (UnimplementedDomainRouteServiceServer) DeleteDomainRoute(context.Context, *DeleteDomainRouteRequest) (*DeleteDomainRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomainRoute not implemented")
}
func (UnimplementedDomainRouteServiceServer) QueryDomainRoute(context.Context, *QueryDomainRouteRequest) (*QueryDomainRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDomainRoute not implemented")
}
func (UnimplementedDomainRouteServiceServer) BatchQueryDomainRouteStatus(context.Context, *BatchQueryDomainRouteStatusRequest) (*BatchQueryDomainRouteStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryDomainRouteStatus not implemented")
}
func (UnimplementedDomainRouteServiceServer) mustEmbedUnimplementedDomainRouteServiceServer() {}

// UnsafeDomainRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainRouteServiceServer will
// result in compilation errors.
type UnsafeDomainRouteServiceServer interface {
	mustEmbedUnimplementedDomainRouteServiceServer()
}

func RegisterDomainRouteServiceServer(s grpc.ServiceRegistrar, srv DomainRouteServiceServer) {
	s.RegisterService(&DomainRouteService_ServiceDesc, srv)
}

func _DomainRouteService_CreateDomainRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainRouteServiceServer).CreateDomainRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainRouteService_CreateDomainRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainRouteServiceServer).CreateDomainRoute(ctx, req.(*CreateDomainRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainRouteService_DeleteDomainRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainRouteServiceServer).DeleteDomainRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainRouteService_DeleteDomainRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainRouteServiceServer).DeleteDomainRoute(ctx, req.(*DeleteDomainRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainRouteService_QueryDomainRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDomainRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainRouteServiceServer).QueryDomainRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainRouteService_QueryDomainRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainRouteServiceServer).QueryDomainRoute(ctx, req.(*QueryDomainRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainRouteService_BatchQueryDomainRouteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryDomainRouteStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainRouteServiceServer).BatchQueryDomainRouteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainRouteService_BatchQueryDomainRouteStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainRouteServiceServer).BatchQueryDomainRouteStatus(ctx, req.(*BatchQueryDomainRouteStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DomainRouteService_ServiceDesc is the grpc.ServiceDesc for DomainRouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DomainRouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kuscia.proto.api.v1alpha1.kusciaapi.DomainRouteService",
	HandlerType: (*DomainRouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDomainRoute",
			Handler:    _DomainRouteService_CreateDomainRoute_Handler,
		},
		{
			MethodName: "DeleteDomainRoute",
			Handler:    _DomainRouteService_DeleteDomainRoute_Handler,
		},
		{
			MethodName: "QueryDomainRoute",
			Handler:    _DomainRouteService_QueryDomainRoute_Handler,
		},
		{
			MethodName: "BatchQueryDomainRouteStatus",
			Handler:    _DomainRouteService_BatchQueryDomainRouteStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kuscia/proto/api/v1alpha1/kusciaapi/domain_route.proto",
}
