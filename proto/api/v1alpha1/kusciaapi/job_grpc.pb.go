// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.8
// source: kuscia/proto/api/v1alpha1/kusciaapi/job.proto

package kusciaapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobService_CreateJob_FullMethodName           = "/kuscia.proto.api.v1alpha1.kusciaapi.JobService/CreateJob"
	JobService_QueryJob_FullMethodName            = "/kuscia.proto.api.v1alpha1.kusciaapi.JobService/QueryJob"
	JobService_BatchQueryJobStatus_FullMethodName = "/kuscia.proto.api.v1alpha1.kusciaapi.JobService/BatchQueryJobStatus"
	JobService_StopJob_FullMethodName             = "/kuscia.proto.api.v1alpha1.kusciaapi.JobService/StopJob"
	JobService_RestartJob_FullMethodName          = "/kuscia.proto.api.v1alpha1.kusciaapi.JobService/RestartJob"
	JobService_SuspendJob_FullMethodName          = "/kuscia.proto.api.v1alpha1.kusciaapi.JobService/SuspendJob"
	JobService_CancelJob_FullMethodName           = "/kuscia.proto.api.v1alpha1.kusciaapi.JobService/CancelJob"
	JobService_DeleteJob_FullMethodName           = "/kuscia.proto.api.v1alpha1.kusciaapi.JobService/DeleteJob"
	JobService_WatchJob_FullMethodName            = "/kuscia.proto.api.v1alpha1.kusciaapi.JobService/WatchJob"
	JobService_ApproveJob_FullMethodName          = "/kuscia.proto.api.v1alpha1.kusciaapi.JobService/ApproveJob"
)

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServiceClient interface {
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error)
	QueryJob(ctx context.Context, in *QueryJobRequest, opts ...grpc.CallOption) (*QueryJobResponse, error)
	BatchQueryJobStatus(ctx context.Context, in *BatchQueryJobStatusRequest, opts ...grpc.CallOption) (*BatchQueryJobStatusResponse, error)
	StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*StopJobResponse, error)
	RestartJob(ctx context.Context, in *RestartJobRequest, opts ...grpc.CallOption) (*RestartJobResponse, error)
	SuspendJob(ctx context.Context, in *SuspendJobRequest, opts ...grpc.CallOption) (*SuspendJobResponse, error)
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error)
	WatchJob(ctx context.Context, in *WatchJobRequest, opts ...grpc.CallOption) (JobService_WatchJobClient, error)
	ApproveJob(ctx context.Context, in *ApproveJobRequest, opts ...grpc.CallOption) (*ApproveJobResponse, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error) {
	out := new(CreateJobResponse)
	err := c.cc.Invoke(ctx, JobService_CreateJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) QueryJob(ctx context.Context, in *QueryJobRequest, opts ...grpc.CallOption) (*QueryJobResponse, error) {
	out := new(QueryJobResponse)
	err := c.cc.Invoke(ctx, JobService_QueryJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) BatchQueryJobStatus(ctx context.Context, in *BatchQueryJobStatusRequest, opts ...grpc.CallOption) (*BatchQueryJobStatusResponse, error) {
	out := new(BatchQueryJobStatusResponse)
	err := c.cc.Invoke(ctx, JobService_BatchQueryJobStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) StopJob(ctx context.Context, in *StopJobRequest, opts ...grpc.CallOption) (*StopJobResponse, error) {
	out := new(StopJobResponse)
	err := c.cc.Invoke(ctx, JobService_StopJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) RestartJob(ctx context.Context, in *RestartJobRequest, opts ...grpc.CallOption) (*RestartJobResponse, error) {
	out := new(RestartJobResponse)
	err := c.cc.Invoke(ctx, JobService_RestartJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) SuspendJob(ctx context.Context, in *SuspendJobRequest, opts ...grpc.CallOption) (*SuspendJobResponse, error) {
	out := new(SuspendJobResponse)
	err := c.cc.Invoke(ctx, JobService_SuspendJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error) {
	out := new(CancelJobResponse)
	err := c.cc.Invoke(ctx, JobService_CancelJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error) {
	out := new(DeleteJobResponse)
	err := c.cc.Invoke(ctx, JobService_DeleteJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) WatchJob(ctx context.Context, in *WatchJobRequest, opts ...grpc.CallOption) (JobService_WatchJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobService_ServiceDesc.Streams[0], JobService_WatchJob_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &jobServiceWatchJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobService_WatchJobClient interface {
	Recv() (*WatchJobEventResponse, error)
	grpc.ClientStream
}

type jobServiceWatchJobClient struct {
	grpc.ClientStream
}

func (x *jobServiceWatchJobClient) Recv() (*WatchJobEventResponse, error) {
	m := new(WatchJobEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobServiceClient) ApproveJob(ctx context.Context, in *ApproveJobRequest, opts ...grpc.CallOption) (*ApproveJobResponse, error) {
	out := new(ApproveJobResponse)
	err := c.cc.Invoke(ctx, JobService_ApproveJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations must embed UnimplementedJobServiceServer
// for forward compatibility
type JobServiceServer interface {
	CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error)
	QueryJob(context.Context, *QueryJobRequest) (*QueryJobResponse, error)
	BatchQueryJobStatus(context.Context, *BatchQueryJobStatusRequest) (*BatchQueryJobStatusResponse, error)
	StopJob(context.Context, *StopJobRequest) (*StopJobResponse, error)
	RestartJob(context.Context, *RestartJobRequest) (*RestartJobResponse, error)
	SuspendJob(context.Context, *SuspendJobRequest) (*SuspendJobResponse, error)
	CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error)
	DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error)
	WatchJob(*WatchJobRequest, JobService_WatchJobServer) error
	ApproveJob(context.Context, *ApproveJobRequest) (*ApproveJobResponse, error)
	mustEmbedUnimplementedJobServiceServer()
}

// UnimplementedJobServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (UnimplementedJobServiceServer) CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedJobServiceServer) QueryJob(context.Context, *QueryJobRequest) (*QueryJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryJob not implemented")
}
func (UnimplementedJobServiceServer) BatchQueryJobStatus(context.Context, *BatchQueryJobStatusRequest) (*BatchQueryJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryJobStatus not implemented")
}
func (UnimplementedJobServiceServer) StopJob(context.Context, *StopJobRequest) (*StopJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (UnimplementedJobServiceServer) RestartJob(context.Context, *RestartJobRequest) (*RestartJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartJob not implemented")
}
func (UnimplementedJobServiceServer) SuspendJob(context.Context, *SuspendJobRequest) (*SuspendJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendJob not implemented")
}
func (UnimplementedJobServiceServer) CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedJobServiceServer) DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedJobServiceServer) WatchJob(*WatchJobRequest, JobService_WatchJobServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchJob not implemented")
}
func (UnimplementedJobServiceServer) ApproveJob(context.Context, *ApproveJobRequest) (*ApproveJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveJob not implemented")
}
func (UnimplementedJobServiceServer) mustEmbedUnimplementedJobServiceServer() {}

// UnsafeJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServiceServer will
// result in compilation errors.
type UnsafeJobServiceServer interface {
	mustEmbedUnimplementedJobServiceServer()
}

func RegisterJobServiceServer(s grpc.ServiceRegistrar, srv JobServiceServer) {
	s.RegisterService(&JobService_ServiceDesc, srv)
}

func _JobService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_QueryJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).QueryJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_QueryJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).QueryJob(ctx, req.(*QueryJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_BatchQueryJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).BatchQueryJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_BatchQueryJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).BatchQueryJobStatus(ctx, req.(*BatchQueryJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_StopJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).StopJob(ctx, req.(*StopJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_RestartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).RestartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_RestartJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).RestartJob(ctx, req.(*RestartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_SuspendJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).SuspendJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_SuspendJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).SuspendJob(ctx, req.(*SuspendJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_CancelJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_DeleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_WatchJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobServiceServer).WatchJob(m, &jobServiceWatchJobServer{stream})
}

type JobService_WatchJobServer interface {
	Send(*WatchJobEventResponse) error
	grpc.ServerStream
}

type jobServiceWatchJobServer struct {
	grpc.ServerStream
}

func (x *jobServiceWatchJobServer) Send(m *WatchJobEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _JobService_ApproveJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ApproveJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_ApproveJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ApproveJob(ctx, req.(*ApproveJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobService_ServiceDesc is the grpc.ServiceDesc for JobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kuscia.proto.api.v1alpha1.kusciaapi.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _JobService_CreateJob_Handler,
		},
		{
			MethodName: "QueryJob",
			Handler:    _JobService_QueryJob_Handler,
		},
		{
			MethodName: "BatchQueryJobStatus",
			Handler:    _JobService_BatchQueryJobStatus_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _JobService_StopJob_Handler,
		},
		{
			MethodName: "RestartJob",
			Handler:    _JobService_RestartJob_Handler,
		},
		{
			MethodName: "SuspendJob",
			Handler:    _JobService_SuspendJob_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _JobService_CancelJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _JobService_DeleteJob_Handler,
		},
		{
			MethodName: "ApproveJob",
			Handler:    _JobService_ApproveJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchJob",
			Handler:       _JobService_WatchJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kuscia/proto/api/v1alpha1/kusciaapi/job.proto",
}
