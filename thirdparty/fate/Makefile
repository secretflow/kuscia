
# Image URL to use all building image targets
DATETIME = $(shell date +"%Y%m%d%H%M%S")
COMMIT_ID = $(shell git log -1 --pretty="format:%h")
TAG = 0.0.1
DEPLOY_IMG ?= secretflow/fate-deploy-basic:${TAG}
ADAPTER_IMG ?= secretflow/fate-adapter:${TAG}

# Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)
ifeq (,$(shell go env GOBIN))
GOBIN=$(shell go env GOPATH)/bin
else
GOBIN=$(shell go env GOBIN)
endif

# Setting SHELL to bash allows bash commands to be executed by recipes.
# Options are set to exit when a recipe line exits non-zero or a piped command fails.
SHELL = /usr/bin/env bash -o pipefail
.SHELLFLAGS = -ec

.PHONY: all
all: build

##@ General

# The help target prints out all targets with their descriptions organized
# beneath their categories. The categories are represented by '##@' and the
# target descriptions by '##'. The awk commands is responsible for reading the
# entire set of makefiles included in this invocation, looking for lines of the
# file as xyz: ## something, and then pretty-format the target and help. Then,
# if there's a line with ##@ something, that gets pretty-printed as a category.
# More info on the usage of ANSI control characters for terminal formatting:
# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters
# More info on the awk command:
# http://linuxcommand.org/lc3_adv_awk.php

.PHONY: help
help: ## Display this help.
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

.PHONY: fmt
fmt: ## Run go fmt against code.
	go fmt ../...

.PHONY: vet
vet: ## Run go vet against code.
	go vet ../...

.PHONY: clean
clean: # clean build and test product.
	-rm -rf ./build/apps

##@ Build

.PHONY: build
build: fmt vet ## Build kuscia binary.
	sh ./hack/build.sh


.PHONY: fate-adaptor-app-image
fate-adaptor-app-image: export GOOS=linux
fate-adaptor-app-image: export GOARCH=amd64
fate-adaptor-app-image: build ## Build docker image with the manager.
	docker build -t ${ADAPTER_IMG} -f ./build/dockerfile/kuscia-job-adapter.Dockerfile .

.PHONY: deploy-image
deploy-image:	
	docker build -t ${DEPLOY_IMG} -f ./build/dockerfile/deploy.Dockerfile .